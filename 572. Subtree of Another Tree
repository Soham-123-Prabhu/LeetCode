# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isSubtree(self, root, subRoot):
        """
        :type root: TreeNode
        :type subRoot: TreeNode
        :rtype: bool
        """
        def isSameTree(p,q):
            if not p and not q:
                return True
            
            if (p and not q) or (q and not p) or (p.val != q.val):
                return False
            
            return(isSameTree(p.left,q.left) and isSameTree(p.right,q.right))
        
        def has_subtree(root):
            if not root:
                return False
            
            if isSameTree(root, subRoot):
                return True
            
            return has_subtree(root.left) or has_subtree(root.right)

        
        return has_subtree(root)
